options {
  IGNORE_CASE=true;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}

PARSER_END(simplejava)

TOKEN_MGR_DECLS : 
{
	public static int nestedcomments = 0;
}

SKIP : 
{
  	< " " >
|   < "\\t">
|   < "\t">
|	< "EOF">
|	< "\n">
|	< "/*" > { nestedcomments++; SwitchTo(IN_COMMENT);}
|	< "//" (~["\n"])* "\n" >
}

<IN_COMMENT>
SKIP :
{
	< "*/" > { nestedcomments--; if (nestedcomments == 0) SwitchTo(DEFAULT);}
|	< "/*" > { nestedcomments++; }
|	< ~[] >
}

TOKEN : 
{
	< ELSE: "else">
|	< FOR: "for">
|	< IF: "if">
|	< WHILE: "while">
|	< DO: "do">
|	< CLASS: "class">
|	< TRUE: "true">
|	< FALSE: "false">
|	< RETURN: "return">
|	< NEW: "new">
}

TOKEN : 
{
	< PLUS: "+" >
|	< SEMICOLON: ";">
|	< MINUS: "-">
|	< TIMES: "*">
|	< DIVIDE: "/">
|	< EQUAL: "==">
|	< GREATER_THAN: ">">
|	< NOT: "!">
|	< LEFT_BRACE: "{">
|	< LEFT_BRACKET: "[">
|	< RIGHT_BRACKET: "]">
|	< PERIOD: ".">
|	< COMMA: ",">
|	< GREATER_THAN_OR_EQUAL_TO: ">=">
|	< AND: "&&">
|	< RIGHT_BRACE: "}">
|	< LEFT_PARENTHESIS: "(">
|	< RIGHT_PARENTHESIS: ")">
|	< NOT_EQUAL: "!=">
|	< LESS_THAN_OR_EQUAL_TO: "<=">
|	< LESS_THAN: "<">
|	< GETS: "=">
|	< OR: "||">
|	< ADD: "++">
|	< MINUSMINUS: "--">
|   < INTEGER_LITERAL: (["0"-"9"])+>
|	< IDENTIFIER: ["a"-"z", "_"](["_", "a"-"z","0"-"9"])*>

}

void incrementstatement() :
{}
{
	<ADD>
}

void decrementstatement() :
{}
{
	<MINUSMINUS>
}

void program() :
{}
{    
/*perhaps put a star there to check multiple statements */
	/* 1) 0 or more class defs	2) 0 or more function defs	3) EOF */
	((classdefinitions())*) ((functionprototypeordefinition())*) <EOF> 
//	expression() 
}



ASTFunctionDefinition functionprototypeordefinition() :
{Token type; Token name; ASTFormals formals = new ASTFormals(); ASTStatements body = new ASTStatements(); int line; ASTEmptyStatement semicolonchecker = null; ASTStatement returnedstatement = null;}
{
	
	type = <IDENTIFIER> name = <IDENTIFIER> <LEFT_PARENTHESIS> ((formals = formalparameterlist())?) <RIGHT_PARENTHESIS> (semicolonchecker = emptystatement() | <LEFT_BRACE> ((returnedstatement = statement() {body.addElement(returnedstatement);})*) )
	{if (semicolonchecker != null) {
		return new ASTPrototype(type.image, name.image, formals, type.beginLine);
	}else {
		return new ASTFunction(type.image, name.image, formals, body, type.beginLine);
	}}
}

void functionendingafterparen() :
{}
{
	/* FUNCTION PROTOTYPE */
	<SEMICOLON>
	/* FUNCTION DEFINITION */
|	<LEFT_BRACE> ((statement())*) <RIGHT_BRACE>
}

ASTFormals formalparameterlist() :
{ASTFormals formals = null; ASTFormal formal = null;}
{
	(formal = formalparameter()) {if (formal != null) {formals = new ASTFormals(formal);}}((<COMMA> formal = formalparameter())*) {if (formal != null) {formals.addElement(formal);}}
	{if (formals != null) {
		return formals;
	}}
}

ASTFormal formalparameter() :
{ASTFormal returnformal = null; Token type; Token name; boolean checker = false;}
{
	type = <IDENTIFIER> name = <IDENTIFIER> variabledeclarations()
	{if (checker == true) {
		returnformal = new ASTFormal(type.image, name.image, type.beginLine);
	}}
	{if (returnformal != null) {
		return returnformal;
	}}
}

int variabledeclarations() :
/* {Token onetok = null; Token twotok = null;} */
{int counter = 0;}
{	
	/*((onetok = <LEFT_BRACKET>) (twotok = <RIGHT_BRACKET>))* */
	(((<LEFT_BRACKET>) (<RIGHT_BRACKET>)) {counter++;})* 
	/* {if (onetok != null && twotok != null) {return true;} else {return false;}} */
	{return counter;}
}

ASTInstanceVariableDefs variabledefinitions() :
{ASTInstanceVariableDefs variabledefs = new ASTInstanceVariableDefs(); ASTInstanceVariableDef variabledef = null; int counter = 0; Token type; Token name;}
{
	(((type = <IDENTIFIER> name = <IDENTIFIER> (counter = variabledeclarations())<SEMICOLON>){
	if (counter == 0) {
		variabledef = new ASTInstanceVariableDef(type.image, name.image, type.beginLine);
		variabledefs.addElement(variabledef);
	} else {
		variabledef = new ASTInstanceVariableDef(type.image, name.image, counter, type.beginLine);
		variabledefs.addElement(variabledef);
	}	

	})*)
	{return variabledefs;}
}

void expressionlist() :
{}
{
	expression()((<COMMA>expression())*)
}

void statementlist() :
{}
{
	statement()((statement())*)
}

ASTVariable variable(ASTVariable passedinvar) :
{ASTVariable var = null;}
{
	((var = followsvariables(passedinvar))?)
	{return var;}
	
}

void followsclassdefinitionstypes() :
{}
{
/* HAVE  TO CONSIDER THI CASE EVENTUALLY */
	<LEFT_BRACKET> ((followsbracketsone())+) 

}

ASTClass classdefinitions() :
{ASTClass astclass = null; Token stringt; ASTInstanceVariableDefs variabledefs = null;}
{
	/* Get value of identifier so that identifier will not show up in the body */
	<CLASS> stringt = <IDENTIFIER> <LEFT_BRACE> variabledefs = variabledefinitions() <RIGHT_BRACE>
	{astclass = new ASTClass(stringt.image, variabledefs, stringt.beginLine);}
	{return astclass;}
}

ASTStatement statement() :
/* POSSIBLE PROBLEMS WITH INTIALIZING ARRAYVARIABLETOKEN TO BE NULL */
{ASTForStatement forstatement; ASTDoWhileStatement dowhile; ASTStatement body; ASTAssignmentStatement assignstate; ASTVariable avariable = null; Token arrayvariabletoken = null; ASTExpression expression = null; int bracketcounter= 0; Token generaltoken; ASTVariable passedinvariable; ASTStatements returner = new ASTStatements();
ASTVariable bvariable = null; ASTBaseVariable basevariable = null; ASTIfStatement ifstatement;}
{
	dowhile = dowhilestatement() 
	{return dowhile;}
|	generaltoken = <RETURN> ((expression = expression())?) <SEMICOLON> 
	{return new ASTReturnStatement(expression, generaltoken.beginLine);}
|	generaltoken = <WHILE> <LEFT_PARENTHESIS> expression = expression() <RIGHT_PARENTHESIS> body = statement()
	{return new ASTWhileStatement(expression, body, generaltoken.beginLine);}
|	generaltoken = <IF> ifstatement = ifstatement() 
	{return ifstatement;}
|	forstatement()
|	<LEFT_BRACE> ((statement())*) <RIGHT_BRACE>

	/* Note: bvariable correlates to followsvariables */
|	generaltoken = <IDENTIFIER> {passedinvariable = new ASTBaseVariable(generaltoken.image, generaltoken.beginLine);} ((arrayvariabletoken= <IDENTIFIER>  bracketcounter = variabledeclarations() {avariable = new ASTBaseVariable(arrayvariabletoken.image, arrayvariabletoken.beginLine);})| (bvariable = variable(
	/* MAKE SURE TO MAKE CHANGES, was semicolon before but now is emptystatement because they mean the same thing */
	passedinvariable))) 
	/*{if((expression = followsvariablenames())?) */
	((expression = followsvariablenames())?)
	emptystatement() {
		/*This handles the case: int a; */
		if (bracketcounter == 0 && bvariable == null && expression == null) {
			return new ASTVariableDefStatement(generaltoken.image, arrayvariabletoken.image, generaltoken.beginLine);
		}
		/* This handles the case: a = 4 + 3; */
		if (bracketcounter == 0 && bvariable == null && expression != null && avariable == null) {
			basevariable = new ASTBaseVariable(generaltoken.image, generaltoken.beginLine);
			return new ASTAssignmentStatement(basevariable, expression, generaltoken.beginLine);
		}
		/* This handles the case: a[3]=4+3; */
		if (bracketcounter != 0 && bvariable != null && expression != null && avariable == null) {
			basevariable = new ASTBaseVariable(generaltoken.image, generaltoken.beginLine);
			return new ASTAssignmentStatement(basevariable, expression, generaltoken.beginLine);
		}
		/* This handles the case: int x = 5 + 3;*/
		if (bracketcounter == 0 && bvariable == null && expression != null) {
			return new ASTVariableDefStatement(generaltoken.image, arrayvariabletoken.image, expression,generaltoken.beginLine);
		}
		/* This handles the case: int z[]; */
		if (bracketcounter != 0 && bvariable == null && expression == null) {		
			return new ASTVariableDefStatement(generaltoken.image, arrayvariabletoken.image, bracketcounter,generaltoken.beginLine);
		}
		/* This handles the case: int z[3][] = 4 + 2; */
		if (bracketcounter != 0 && bvariable == null && expression != null) {
			return new ASTVariableDefStatement(generaltoken.image, arrayvariabletoken.image, bracketcounter, expression, generaltoken.beginLine);
		}
		/* This handles the case: */
		if (arrayvariabletoken == null && bvariable != null && expression == null) {
			System.out.println("HIT HERE HERE");
			return new ASTAssignmentStatement(passedinvariable, expression, arrayvariabletoken.beginLine);
		}
		if (expression == null || bvariable == null) {System.out.println("HIT HERE"); return null;} 
		else {return new ASTAssignmentStatement(avariable, expression, arrayvariabletoken.beginLine);} 
		
	}
	
|	emptystatement()
}

ASTIfStatement ifstatement() :
{ASTExpression test; ASTStatement thenstatement; ASTStatement elsestatement = null; Token linenumbercatcher;}
{
	linenumbercatcher = <LEFT_PARENTHESIS> test = expression() <RIGHT_PARENTHESIS> thenstatement = statement() ((LOOKAHEAD(1) <ELSE> elsestatement = statement())?) 
	{return new ASTIfStatement(test, thenstatement, elsestatement, linenumbercatcher.beginLine);}
}

ASTEmptyStatement emptystatement() :
{Token semicolontoken; ASTEmptyStatement returnstate;}
{
	semicolontoken = <SEMICOLON>
	{returnstate = new ASTEmptyStatement(semicolontoken.beginLine);}
	{return returnstate;}
}

ASTDoWhileStatement dowhilestatement() :
{Token generaltoken; ASTExpression test = null; ASTStatement body;}
{
	generaltoken = <DO> body = statement() <WHILE> <LEFT_PARENTHESIS> test = expression() <RIGHT_PARENTHESIS> 
	{return new ASTDoWhileStatement(test, body, generaltoken.beginLine);} 
}

void initialization() :
{}
{
	incrementstatement()
|	decrementstatement()
|	assignmentstatement()
}

void forstatement() :
{Token identifier;}
{
	/*Second initialization() is actually increment from book */
	<FOR> <LEFT_PARENTHESIS> 
		((identifier = <IDENTIFIER> (followsvariablenames())*)?) <SEMICOLON> 
		expression() <SEMICOLON> 
		((<IDENTIFIER> initialization())?) 
		<RIGHT_PARENTHESIS> statement()
}

ASTExpression expression() :
{Token t;ASTExpression result; ASTExpression rhs;}
{
	result = expone()((((t = <OR>) rhs =expone())
	{
		result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
	})*)
	{ return result; }
}

ASTExpression expone() :
{Token t; ASTExpression result; ASTExpression rhs; }
{
	result = exptwo()((((t= <AND>) rhs = exptwo())
	{
		result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
	}
	)*)
	{ return result;}
}

ASTExpression exptwo() :
{Token t = null; ASTExpression result; ASTExpression rhs;}
{
	/*result = expthree()((((t=<NOT>) rhs = expthree())
	{
		result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
	})*)
	{ return result;}*/
	
	((t=<NOT>)?) rhs = expthree()
	{if (t != null) {
		result = new ASTUnaryOperatorExpression(rhs, t.image, t.beginLine);
		return result;
	} else {
		result = rhs;
		return result;
	}
	}
	
}

ASTExpression expthree() :
{Token t; ASTExpression result; ASTExpression rhs;}
{
	result = expfour()((((t=<EQUAL> | t=<NOT_EQUAL> | t=<LESS_THAN> | t=<LESS_THAN_OR_EQUAL_TO> | t=<GREATER_THAN> | t=<GREATER_THAN_OR_EQUAL_TO>) rhs = expfour())
		{
			result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
		}
		)*)
	{ return result;}	
}

ASTExpression expfour() :
{Token t; ASTExpression result; ASTExpression rhs;}
{
	result = expfive()((((t= <PLUS> | t= <MINUS>) rhs = expfive())
					{ 
						result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
					}
					)*)
	{ return result;}
}

ASTExpression expfive() :
{Token t; ASTExpression result; ASTExpression rhs;}
{
	result = F()((((t = <TIMES> | t= <DIVIDE>) rhs = F())
					{ 
					  result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
					}
					 )*)
	{ return result;}
}

ASTExpression F() :
{Token t; ASTExpression value = null; ASTVariable variable = null; ASTVariableExpression variableexpression= null;}
{
	<MINUS>value = F() {return new ASTOperatorExpression(new ASTIntegerLiteral(0, 0), value, ASTOperatorExpression.MINUS, 0);}
|	t = <INTEGER_LITERAL> { return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
|	t = <TRUE> { return new ASTBooleanLiteral(Boolean.parseBoolean(t.image), t.beginLine);}
|	t = <FALSE> {return new ASTBooleanLiteral(Boolean.parseBoolean(t.image), t.beginLine);}
|	t = <IDENTIFIER> {variable = new ASTBaseVariable(t.image, t.beginLine);} ((followsvariablenamesforexpressions(variable))?) {variableexpression = new ASTVariableExpression(variable, variable.line());}	{return variableexpression;}
|	<NEW> t = <IDENTIFIER> value = followsnewandidentifier(t) {return value;}
|	<LEFT_PARENTHESIS> value = expression()<RIGHT_PARENTHESIS>{return value;}
}

ASTExpression assignmentstatement() :
{ASTExpression value;}
{
	<GETS> value = expression() {return value;}

}

ASTExpression followsnewandidentifier(Token t) :
{ASTExpression returnresult = null;}
{
	<LEFT_BRACKET> (returnresult = followsbrackets(t)) {return returnresult;}
|	<LEFT_PARENTHESIS><RIGHT_PARENTHESIS> {return new ASTNewClassExpression(t.image, t.beginLine);}
	{return null;}
}

void incrementstatements() :
{ASTAssignmentStatement assignstatement; ASTVariable variable;}
{
	/*ASTAssignmentStatement(variable, ASTExpression value, int line) { */
	incrementstatement()
|	decrementstatement() 
}

ASTVariable followsvariables(ASTVariable astvar) :
{ASTArrayVariable arrayvar; ASTExpression express; ASTVariable nextvariable; Token variabletoken = null;}
{
	((<PERIOD> variabletoken = <IDENTIFIER> {nextvariable = new ASTBaseVariable(variabletoken.image, variabletoken.beginLine);})+) ((followsvariables(nextvariable))?) {return new ASTClassVariable(astvar, variabletoken.image, variabletoken.beginLine);}
	//TOKEN USED IN SECOND CASE JUST TO CAPTURE LINE NUMBER FOR NOW
	/* {astvar = null;} */
|	((<LEFT_BRACKET> express = expression() variabletoken = <RIGHT_BRACKET>)+) {return new ASTArrayVariable(astvar, express, variabletoken.beginLine);} ((followsvariables(astvar))?) 
}

ASTExpression followsvariablenames() :
{ASTExpression value; ASTVariable variable;}
{
	<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS> ((followsvariablenames())?)
|	value = assignmentstatement() {return value;} 
|	incrementstatements() 
}

ASTVariable followsvariablenamesforexpressions(ASTVariable variable) :
{ASTExpression result = null; ASTArrayVariable arrayvar = null; ASTBaseVariable basevar = null; Token variabletoken;}
{
/* Double question mark might be overkill, question mark here and it's caller has ? as well */
	variabletoken = <IDENTIFIER> {basevar = new ASTBaseVariable(variabletoken.image, variabletoken.beginLine);}((followsvariablenamesforexpressions(basevar))*) 
|	((<PERIOD> variabletoken = <IDENTIFIER> {basevar = new ASTBaseVariable(variabletoken.image, variabletoken.beginLine);})+)((followsvariablenamesforexpressions(basevar))?) {return new ASTClassVariable(variable, variabletoken.image, variabletoken.beginLine);}
//|	<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS> ((followsvariablenamesforexpressions(basevar))?)
|	<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS> ((((<PERIOD> variabletoken = <IDENTIFIER> {basevar = new ASTBaseVariable(variabletoken.image, variabletoken.beginLine);})+) ((followsvariablenamesforexpressions(basevar))?))?)
|	((<LEFT_BRACKET> expression() <RIGHT_BRACKET>)+) ((followsvariablenamesforexpressions(basevar))?) 
|	incrementstatements()
}

void followsbracketsone() :
{}
{
	expression() <RIGHT_BRACKET> (((<LEFT_BRACKET><RIGHT_BRACKET>)))
}

ASTExpression followsbrackets(Token t) :
{int counter = 0; ASTExpression value = null;}
{
	value = expression() <RIGHT_BRACKET> {counter++;}(((<LEFT_BRACKET><RIGHT_BRACKET>){counter++;})*) {return new ASTNewArrayExpression(t.image, value, counter, t.beginLine);}
}